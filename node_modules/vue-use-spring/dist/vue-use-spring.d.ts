import { Ref } from 'vue-demi';

export declare const gentle: SpringConfig;

export declare const noWobble: SpringConfig;

declare type NumericalValues = Record<string, number> | number[];

export declare const presets: {
    noWobble: SpringConfig;
    gentle: SpringConfig;
    wobbly: SpringConfig;
    stiff: SpringConfig;
};

declare type Refable<T> = Ref<T> | T;

export declare interface SpringConfig {
    /**
     * Mass of the spring
     */
    mass?: number;
    /**
     * Spring energetic load. Also called stiffness
     */
    tension: number;
    /**
     * Spring resistance.
     */
    friction: number;
    /**
     * The higher the precision, the more smooth and slow to compute the animation
     * will be. By default 0.01 is a good value, but can be decreased to 0.1 in
     * some scenarios for performance.
     */
    precision?: number;
}

export declare const SpringGroup: new () => {
    $props: SpringGroupProps;
};

declare interface SpringGroupProps {
    config?: SpringConfig;
    tag?: string;
}

declare type SpringValue = NumericalValues;

export declare const stiff: SpringConfig;

/**
 * Returns an object with the same shape as initialValue but that interpolates
 * its value when set instead of directly changing.
 *
 * @example
 * ```js
 *   const position = useSpring({ x: 0, y: 100 })
 *   position.x = 100
 *   position.x // 0
 *   await delay(300) // wait some time
 *   // the position.x automatically increases until it reaches 100
 *   position.x // 70
 * ```
 *
 * @param initialValue initial value of the spring controlled variable
 * @param springConfiguration Spring properties. Can be a Ref or Computed
 * @param options Optional options
 */
export declare function useSpring<T extends SpringValue>(initialValue: Refable<T>, springConfiguration?: Refable<SpringConfig>, options?: {
    onRest?: () => any;
}): T;

export declare const wobbly: SpringConfig;

export { }
